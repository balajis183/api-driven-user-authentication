How GitHub Pages Works with React Apps

GitHub Pages allows you to host static websites directly from a GitHub repository. 
For React applications created with Create React App (CRA), additional steps are required 
since React apps need to be built before deployment. Here’s a detailed breakdown of how it works.

Step 1: Understanding the Build Process
----------------------------------------
React applications rely on JavaScript to dynamically generate content. When developing, 
React serves the app locally using a development server. However, this is not suitable for production deployment.

The 'npm run build' command compiles the app into a 'build/' folder, generating optimized static files:
- index.html (Main entry point)
- CSS & JS files (Bundled and minified)
- Asset files (Images, fonts, etc.)

GitHub Pages only serves static files, so we must use the build output for deployment.

Step 2: Setting Up GitHub Pages
--------------------------------
1. Install the GitHub Pages package (optional for automated deployment):
   npm install gh-pages --save-dev

2. Add 'homepage' in package.json to define the deployment URL:
   "homepage": "https://yourusername.github.io/repository-name"

3. Add deployment scripts to package.json:
   "scripts": {
       "predeploy": "npm run build",
       "deploy": "gh-pages -d build"
   }

4. Run the deployment command:
   npm run deploy

Step 3: How GitHub Pages Serves the React App
---------------------------------------------
Once deployed, GitHub Pages serves the static files from the build folder. When a user visits 
the URL, GitHub Pages loads the index.html file, which in turn loads the bundled JavaScript.

React uses JavaScript to render the application on the client’s browser dynamically. Since GitHub Pages 
does not support backend processing, all routes must be handled using React Router with a fallback to index.html.

To avoid 404 errors on page reload, add a redirect rule using a public/_redirects file or a custom 404.html.

Step 4: Testing and Updating the Deployment
-------------------------------------------
1. Wait for GitHub Pages to process the deployment (usually a few minutes).
2. Visit the provided GitHub Pages URL to verify the deployment.
3. If changes are needed, modify your code and run:
   npm run deploy
   This will rebuild the app and push the updated files.

Conclusion
----------
GitHub Pages is a great option for hosting static React applications. By building the app 
before deployment and configuring the repository correctly, you can easily share your project online.
